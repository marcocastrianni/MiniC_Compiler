
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import minic.*;
import scanner.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\003\002\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\006\011\000\002\006\007\000\002\006\007\000\002\006" +
    "\011\000\002\006\011\000\002\006\011\000\002\006\007" +
    "\000\002\006\006\000\002\006\007\000\002\006\007\000" +
    "\002\006\006\000\002\006\006\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\003\005\004\006\001\002\000\004\002" +
    "\145\001\002\000\016\003\ufffe\005\ufffe\010\ufffe\011\ufffe" +
    "\013\ufffe\042\ufffe\001\002\000\016\003\ufffe\005\ufffe\010" +
    "\ufffe\011\ufffe\013\ufffe\042\ufffe\001\002\000\016\003\017" +
    "\005\015\010\020\011\016\013\011\042\012\001\002\000" +
    "\020\003\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\042\ufffc\001\002\000\006\003\127\006\130\001\002\000" +
    "\020\003\075\014\076\015\103\016\102\017\077\020\100" +
    "\021\074\001\002\000\016\003\ufffd\005\ufffd\010\ufffd\011" +
    "\ufffd\013\ufffd\042\ufffd\001\002\000\020\003\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\042\ufffb\001\002\000" +
    "\004\002\000\001\002\000\006\003\056\006\057\001\002" +
    "\000\016\003\023\006\027\023\026\037\024\041\022\042" +
    "\025\001\002\000\020\003\ufffa\005\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\042\ufffa\001\002\000\016\003\023\006" +
    "\027\023\026\037\024\041\022\042\025\001\002\000\054" +
    "\003\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\042\uffe5\001\002\000\016\003\023\006\027\023\026" +
    "\037\024\041\022\042\025\001\002\000\016\003\uffd9\006" +
    "\uffd9\023\uffd9\037\uffd9\041\uffd9\042\uffd9\001\002\000\054" +
    "\003\uffe4\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\042\uffe4\001\002\000\016\003\uffd8\006\uffd8\023\uffd8" +
    "\037\uffd8\041\uffd8\042\uffd8\001\002\000\016\003\023\006" +
    "\027\023\026\037\024\041\022\042\025\001\002\000\052" +
    "\003\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\022" +
    "\032\023\033\024\046\025\037\026\043\027\042\030\036" +
    "\031\041\032\045\033\034\034\035\035\031\036\047\042" +
    "\ufff9\001\002\000\016\003\uffcc\006\uffcc\023\uffcc\037\uffcc" +
    "\041\uffcc\042\uffcc\001\002\000\016\003\uffd7\006\uffd7\023" +
    "\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\016\003\uffd6" +
    "\006\uffd6\023\uffd6\037\uffd6\041\uffd6\042\uffd6\001\002\000" +
    "\016\003\uffce\006\uffce\023\uffce\037\uffce\041\uffce\042\uffce" +
    "\001\002\000\016\003\uffcd\006\uffcd\023\uffcd\037\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\016\003\uffd1\006\uffd1\023\uffd1" +
    "\037\uffd1\041\uffd1\042\uffd1\001\002\000\016\003\uffd4\006" +
    "\uffd4\023\uffd4\037\uffd4\041\uffd4\042\uffd4\001\002\000\016" +
    "\003\023\006\027\023\026\037\024\041\022\042\025\001" +
    "\002\000\016\003\uffd0\006\uffd0\023\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\001\002\000\016\003\uffd2\006\uffd2\023\uffd2\037" +
    "\uffd2\041\uffd2\042\uffd2\001\002\000\016\003\uffd3\006\uffd3" +
    "\023\uffd3\037\uffd3\041\uffd3\042\uffd3\001\002\000\016\003" +
    "\023\006\027\023\026\037\024\041\022\042\025\001\002" +
    "\000\016\003\uffcf\006\uffcf\023\uffcf\037\uffcf\041\uffcf\042" +
    "\uffcf\001\002\000\016\003\uffd5\006\uffd5\023\uffd5\037\uffd5" +
    "\041\uffd5\042\uffd5\001\002\000\016\003\uffcb\006\uffcb\023" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000\054\003\uffe0" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\042" +
    "\uffe0\001\002\000\054\003\044\005\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\022\032\023\033\024\046\025" +
    "\037\026\043\027\042\030\036\031\041\032\045\033\034" +
    "\034\035\035\031\036\047\042\uffe1\001\002\000\040\003" +
    "\044\007\053\022\032\023\033\024\046\025\037\026\043" +
    "\027\042\030\036\031\041\032\045\033\034\034\035\035" +
    "\031\036\047\001\002\000\054\003\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\042\uffe6\001\002\000" +
    "\054\003\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\042\uffe2\001\002\000\054\003\044\005\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\022\032\023\033" +
    "\024\046\025\037\026\043\027\042\030\036\031\041\032" +
    "\045\033\034\034\035\035\031\036\047\042\uffe3\001\002" +
    "\000\016\003\023\006\027\023\026\037\024\041\022\042" +
    "\025\001\002\000\016\003\060\006\027\023\026\037\024" +
    "\041\022\042\025\001\002\000\020\003\023\006\027\007" +
    "\121\023\026\037\024\041\022\042\025\001\002\000\040" +
    "\003\063\007\062\022\032\023\033\024\046\025\037\026" +
    "\043\027\042\030\036\031\041\032\045\033\034\034\035" +
    "\035\031\036\047\001\002\000\016\003\115\004\064\010" +
    "\020\011\016\013\011\042\012\001\002\000\026\003\070" +
    "\004\064\006\027\010\020\011\016\013\011\023\026\037" +
    "\024\041\022\042\065\001\002\000\016\003\ufffe\005\ufffe" +
    "\010\ufffe\011\ufffe\013\ufffe\042\ufffe\001\002\000\054\003" +
    "\075\007\uffe4\014\076\015\103\016\102\017\077\020\100" +
    "\021\074\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\001\002\000\020\003\uffe9\005\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\042\uffe9\001\002\000\004\012\072" +
    "\001\002\000\016\003\023\006\027\023\026\037\024\041" +
    "\022\042\025\001\002\000\042\003\uffe2\007\uffe2\012\ufff9" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\001\002\000\016\003\017\004\064\010\020\011\016\013" +
    "\011\042\012\001\002\000\020\003\ufff1\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\042\ufff1\001\002\000\016\003" +
    "\uffda\006\uffda\023\uffda\037\uffda\041\uffda\042\uffda\001\002" +
    "\000\016\003\023\006\027\023\026\037\024\041\022\042" +
    "\025\001\002\000\016\003\uffdf\006\uffdf\023\uffdf\037\uffdf" +
    "\041\uffdf\042\uffdf\001\002\000\016\003\uffdc\006\uffdc\023" +
    "\uffdc\037\uffdc\041\uffdc\042\uffdc\001\002\000\016\003\uffdb" +
    "\006\uffdb\023\uffdb\037\uffdb\041\uffdb\042\uffdb\001\002\000" +
    "\016\003\023\006\027\023\026\037\024\041\022\042\025" +
    "\001\002\000\016\003\uffdd\006\uffdd\023\uffdd\037\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\016\003\uffde\006\uffde\023\uffde" +
    "\037\uffde\041\uffde\042\uffde\001\002\000\040\003\105\010" +
    "\106\022\032\023\033\024\046\025\037\026\043\027\042" +
    "\030\036\031\041\032\045\033\034\034\035\035\031\036" +
    "\047\001\002\000\030\003\ufff6\005\ufff6\006\027\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\023\026\037\024\041\022\042" +
    "\ufff6\001\002\000\020\003\ufff8\005\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\042\ufff8\001\002\000\040\003\044\010" +
    "\110\022\032\023\033\024\046\025\037\026\043\027\042" +
    "\030\036\031\041\032\045\033\034\034\035\035\031\036" +
    "\047\001\002\000\020\003\ufff7\005\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\042\ufff7\001\002\000\016\003\113\005" +
    "\112\010\020\011\016\013\011\042\012\001\002\000\020" +
    "\003\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\042" +
    "\uffe8\001\002\000\030\003\uffe7\005\uffe7\006\027\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\023\026\037\024\041\022\042" +
    "\uffe7\001\002\000\020\003\ufff4\005\ufff4\010\ufff4\011\ufff4" +
    "\012\116\013\ufff4\042\ufff4\001\002\000\030\003\uffef\005" +
    "\uffef\006\027\010\uffef\011\uffef\012\uffef\013\uffef\023\026" +
    "\037\024\041\022\042\uffef\001\002\000\016\003\120\004" +
    "\064\010\020\011\016\013\011\042\012\001\002\000\020" +
    "\003\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\042" +
    "\ufff5\001\002\000\030\003\ufff0\005\ufff0\006\027\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\023\026\037\024\041\022\042" +
    "\ufff0\001\002\000\020\003\uffee\005\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\042\uffee\001\002\000\040\003\044\007" +
    "\123\022\032\023\033\024\046\025\037\026\043\027\042" +
    "\030\036\031\041\032\045\033\034\034\035\035\031\036" +
    "\047\001\002\000\016\003\017\004\064\010\020\011\016" +
    "\013\011\042\012\001\002\000\004\012\125\001\002\000" +
    "\016\003\017\004\064\010\020\011\016\013\011\042\012" +
    "\001\002\000\020\003\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\042\ufff2\001\002\000\016\003\023\006\027" +
    "\023\026\037\024\041\022\042\025\001\002\000\016\003" +
    "\131\006\027\023\026\037\024\041\022\042\025\001\002" +
    "\000\020\003\023\006\027\007\137\023\026\037\024\041" +
    "\022\042\025\001\002\000\040\003\134\007\133\022\032" +
    "\023\033\024\046\025\037\026\043\027\042\030\036\031" +
    "\041\032\045\033\034\034\035\035\031\036\047\001\002" +
    "\000\016\003\136\004\064\010\020\011\016\013\011\042" +
    "\012\001\002\000\030\003\uffeb\005\uffeb\006\027\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\023\026\037\024\041\022\042" +
    "\uffeb\001\002\000\020\003\ufff3\005\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\042\ufff3\001\002\000\030\003\uffed\005" +
    "\uffed\006\027\010\uffed\011\uffed\012\uffed\013\uffed\023\026" +
    "\037\024\041\022\042\uffed\001\002\000\020\003\uffea\005" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\042\uffea\001\002" +
    "\000\040\003\044\007\141\022\032\023\033\024\046\025" +
    "\037\026\043\027\042\030\036\031\041\032\045\033\034" +
    "\034\035\035\031\036\047\001\002\000\016\003\017\004" +
    "\064\010\020\011\016\013\011\042\012\001\002\000\020" +
    "\003\uffec\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\042" +
    "\uffec\001\002\000\016\003\017\005\144\010\020\011\016" +
    "\013\011\042\012\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\142\001\001\000\004\003\006\001\001\000\010" +
    "\004\012\005\007\006\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\027\013\020\001\001\000\002\001\001\000\006" +
    "\007\054\013\020\001\001\000\002\001\001\000\006\007" +
    "\053\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\051\013\020\001\001\000" +
    "\004\011\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\050\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\047\013\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\037\001" +
    "\001\000\004\011\037\001\001\000\004\011\037\001\001" +
    "\000\002\001\001\000\004\011\037\001\001\000\004\011" +
    "\037\001\001\000\006\007\121\013\020\001\001\000\006" +
    "\007\060\013\020\001\001\000\006\007\053\013\020\001" +
    "\001\000\004\011\037\001\001\000\012\004\065\005\007" +
    "\006\013\010\113\001\001\000\016\004\065\005\007\006" +
    "\013\007\047\010\066\013\020\001\001\000\004\003\110" +
    "\001\001\000\004\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\070\013\020\001\001\000\004" +
    "\011\037\001\001\000\012\004\065\005\007\006\013\010" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\106\013\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\103\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\037\001" +
    "\001\000\006\007\047\013\020\001\001\000\002\001\001" +
    "\000\004\011\037\001\001\000\002\001\001\000\010\004" +
    "\012\005\007\006\013\001\001\000\002\001\001\000\006" +
    "\007\027\013\020\001\001\000\002\001\001\000\006\007" +
    "\027\013\020\001\001\000\012\004\065\005\007\006\013" +
    "\010\116\001\001\000\002\001\001\000\006\007\027\013" +
    "\020\001\001\000\002\001\001\000\004\011\037\001\001" +
    "\000\012\004\065\005\007\006\013\010\123\001\001\000" +
    "\002\001\001\000\012\004\065\005\007\006\013\010\125" +
    "\001\001\000\002\001\001\000\006\007\137\013\020\001" +
    "\001\000\006\007\131\013\020\001\001\000\006\007\053" +
    "\013\020\001\001\000\004\011\037\001\001\000\012\004" +
    "\065\005\007\006\013\010\134\001\001\000\006\007\047" +
    "\013\020\001\001\000\002\001\001\000\006\007\027\013" +
    "\020\001\001\000\002\001\001\000\004\011\037\001\001" +
    "\000\012\004\065\005\007\006\013\010\141\001\001\000" +
    "\002\001\001\000\010\004\012\005\007\006\013\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public boolean syntaxErrors;
  public static int errors = 0;

  Yylex lexer;
 
  public parser(Yylex lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }
    
public int getNumErrors(){
    return errors;
}

@Override
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
        try {
            System.err.println("  "+ errors + "==> " + info + " "+ message +
                    "\n       Parsing resumed from 2nd token before" + lexer.next_token()+"\n");
        } catch (IOException ex) {
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    else {
        errors++; 
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" ); 
           m.append( "\n At line " + lexer.getLine() );
    	m.append(" : "+message);   
        
    	System.err.println(m);
        System.err.println("Current #errors:" + errors);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public static void reportErrorLine(){
        System.err.println("Error at line: " + Yylex.getLine() );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PGRAFFAPERTA stmtlist PGRAFFACHIUSA 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error stmtlist PGRAFFACHIUSA 
            {
              Program RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Expected '{' at the beginning of the program", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtlist ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = new LinkedList<Stmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmtlist ::= stmtlist stmt 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= simp 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simp s = (Simp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= control 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Control c = (Control)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PVIRGOLA 
            {
              Stmt RESULT =null;
		 RESULT = Stmt.empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= error exp 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Expected identifier or WHILE or IF token", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simp ::= IDENT asop exp PVIRGOLA 
            {
              Simp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Simp(i, a, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simp ::= IDENT error exp PVIRGOLA 
            {
              Simp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Expected assignment operator", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simp ::= IDENT asop exp error 
            {
              Simp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Expected ';' ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // control ::= IF PTONDAPERTA exp PTONDACHIUSA block ELSE block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Control.ifthenelse(b1,b2,e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // control ::= IF PTONDAPERTA exp PTONDACHIUSA block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Control.ifthen(b, e ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // control ::= WHILE PTONDAPERTA exp PTONDACHIUSA block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Control.whileloop(b,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control ::= IF error exp PTONDACHIUSA block ELSE block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		parser.report_error("Missing ( in  IF condition ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control ::= IF PTONDAPERTA exp error block ELSE block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.report_error("Missing ')' in IF condition ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // control ::= IF PTONDAPERTA exp PTONDACHIUSA block ELSE error 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("ELSE without body", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // control ::= IF PTONDAPERTA exp PTONDACHIUSA error 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Expected ';' ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control ::= IF PTONDAPERTA error PTONDACHIUSA 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Missing condition in IF Statement ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // control ::= WHILE PTONDAPERTA exp PTONDACHIUSA error 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Expected ';' ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // control ::= WHILE error exp PTONDACHIUSA block 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.report_error("Missing ( in condition ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // control ::= WHILE PTONDAPERTA exp error 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Missing ')' in condition ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // control ::= WHILE PTONDAPERTA error PTONDACHIUSA 
            {
              Control RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Missing condition in WHILE Statement ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= stmt 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= PGRAFFAPERTA stmtlist PGRAFFACHIUSA 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Stmt.compound(sl) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= PGRAFFAPERTA stmtlist error 
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Expected '}' at the end of the block ", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= PTONDAPERTA exp PTONDACHIUSA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= INTCONST 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Exp.intconst(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= IDENT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Exp.ident(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= unop exp 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Exp.unop(u,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= error exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Syntax error, expected unary op", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp binop exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Exp.binop(e1,op,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp error exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Syntax error, expected binary op", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asop ::= ASSEGN 
            {
              Integer RESULT =null;
		 RESULT = sym.ASSEGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asop ::= PIUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.PIUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asop ::= MENOUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.MENOUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asop ::= PERUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.PERUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asop ::= DIVISOUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.DIVISOUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asop ::= MODULOUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.MODULOUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unop ::= NOT 
            {
              Integer RESULT =null;
		 RESULT = sym.NOT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unop ::= MENO 
            {
              Integer RESULT =null;
		 RESULT = sym.MENO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binop ::= PIU 
            {
              Integer RESULT =null;
		 RESULT = sym.PIU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binop ::= MENO 
            {
              Integer RESULT =null;
		 RESULT = sym.MENO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binop ::= PER 
            {
              Integer RESULT =null;
		 RESULT = sym.PER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binop ::= DIVISO 
            {
              Integer RESULT =null;
		 RESULT = sym.DIVISO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binop ::= MODULO 
            {
              Integer RESULT =null;
		 RESULT = sym.MODULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binop ::= MINORE 
            {
              Integer RESULT =null;
		 RESULT = sym.MINORE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binop ::= MINOREUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.MINOREUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binop ::= MAGGIORE 
            {
              Integer RESULT =null;
		 RESULT = sym.MAGGIORE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binop ::= MAGGIOREUGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.MAGGIOREUGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binop ::= DIVERSO 
            {
              Integer RESULT =null;
		 RESULT = sym.DIVERSO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binop ::= UGUALE 
            {
              Integer RESULT =null;
		 RESULT = sym.UGUALE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binop ::= AND 
            {
              Integer RESULT =null;
		 RESULT = sym.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binop ::= OR 
            {
              Integer RESULT =null;
		 RESULT = sym.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
